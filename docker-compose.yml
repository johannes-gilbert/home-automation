
version: '3.6'

networks:
  default:
    driver: bridge
    ipam:
      driver: default


services:

  traefik:
    image: "traefik:latest"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      # Enable the dashboard, see https://doc.traefik.io/traefik/operations/api/#dashboard
      - "--api.dashboard=true"                        # Enable the dashboard to view services, middlewares, routers, etc...
      - "--providers.docker=true"                     
      - "--providers.docker.exposedByDefault=false"   # Don't expose every container to traefik, only expose enabled ones, see https://doc.traefik.io/traefik/providers/docker/#exposedbydefault
      ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
      - "--entrypoints.web.address=:80"               # Defining an entryPoint with name 'web' for port :80 named web  
      - "--entrypoints.websecure.address=:443"        # Defining an entryPoint with name 'websecure' for port :443
      # Redirecting incomping HTTP requests to entryPoint for HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"  # target element
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"  # target scheme (i.e. protocol)
      ## Let traefik automatically setup and renew SSL-certificates.
      # Here the 'HTTP-01' challenge is used to generate and renew ACME certificates by provisioning an HTTP resource under a well-known URI. See https://doc.traefik.io/traefik/https/acme/#httpchallenge
      # The certificate resolver 'le' is defined ('le' is just any name)
      - "--certificatesresolvers.le.acme.email=<your-email-address>" # File used for certificates storage, see https://doc.traefik.io/traefik/https/acme/#configuration-examples
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"   # storage for the ACME-challenge, 
      - "--certificatesresolvers.le.acme.httpChallenge.entrypoint=web"     # Using the EntryPoint called 'web' for the httpChallenge
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      # Share the docker sock with the Traefik container
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # Mount directory 'letsencrypt' which is placed next to this yml file. It is used to store the ACME data
      - "./volumes/letsencrypt:/letsencrypt"
    labels:
      - "traefik.enable=true"                      # Tell traefik to consider this container, see https://doc.traefik.io/traefik/routing/providers/docker/#traefikenable
      # Router configuration, see https://doc.traefik.io/traefik/routing/providers/docker/#routers
      - "traefik.http.routers.traefik.rule=Host(`dashboard.<your-domain>`)"  # Check if the request domain (host header value) targets 'dashboard.queple.duckdns.org', see https://doc.traefik.io/traefik/routing/routers/#rule
      - "traefik.http.routers.traefik.entrypoints=websecure"                      # Limit the router to entryPoint 'websecure' (HTTPS)
      - "traefik.http.routers.traefik.service=api@internal"                       # see https://doc.traefik.io/traefik/operations/dashboard/#secure-mode
      - "traefik.http.routers.traefik.tls.certresolver=le"                        # Let the certificate resolver 'le' generated (or renew) certificates based on the router's Host-rule(s), see https://doc.traefik.io/traefik/routing/routers/#certresolver
      - "traefik.http.routers.traefik.middlewares=traefik-auth"    
      - "traefik.http.middlewares.traefik-auth.basicauth.users=<user:password>" # Use basic authentication, see https://doc.traefik.io/traefik/middlewares/http/basicauth/

  grafana:
    container_name: grafana
    image: grafana/grafana:10.1.2-ubuntu
#    image: grafana/grafana
    restart: unless-stopped
    user: "0"
    ports:
    - "3000:3000"
    environment:
    - TZ=Etc/UTC
    - GF_PATHS_DATA=/var/lib/grafana
    - GF_PATHS_LOGS=/var/log/grafana
    volumes:
    - ./volumes/grafana/data:/var/lib/grafana
    - ./volumes/grafana/log:/var/log/grafana
    #healthcheck:
    #  test: ["CMD", "wget", "-O", "/dev/null", "http://localhost:3000"]
    #  interval: 30s
    #  timeout: 10s
    #  retries: 3
    #  start_period: 30s
    labels:
      - "traefik.enable=true"                      # Tell traefik to consider this container, see https://doc.traefik.io/traefik/routing/providers/docker/#traefikenable
      # Router configuration, see https://doc.traefik.io/traefik/routing/providers/docker/#routers
      - "traefik.http.routers.grafana.rule=Host(`grafana.<your-domain>`)"  # Check if the request domain (host header value) targets 'grafana.queple.duckdns.org', see https://doc.traefik.io/traefik/routing/routers/#rule
      - "traefik.http.routers.grafana.entrypoints=websecure"                      # Limit the router to entryPoint 'websecure' (HTTPS)
      - "traefik.http.routers.grafana.tls.certresolver=le"                        # Let the certificate resolver 'le' generated (or renew) certificates based on the router's Host-rule(s), see https://doc.traefik.io/traefik/routing/routers/#certresolver
      - "traefik.http.routers.grafana.middlewares=traefik-auth"    
      - "traefik.http.middlewares.traefik-auth.basicauth.users=<user:password>" # Use basic authentication, see https://doc.traefik.io/traefik/middlewares/http/basicauth/

  influxdb:
    container_name: influxdb
    image: "influxdb:1.8"
    restart: unless-stopped
    ports:
    - "8086:8086"
    environment:
    - TZ=Etc/UTC
    - INFLUXDB_HTTP_FLUX_ENABLED=false
    - INFLUXDB_REPORTING_DISABLED=false
    - INFLUXDB_HTTP_AUTH_ENABLED=false
    - INFLUXDB_MONITOR_STORE_ENABLED=FALSE
  # - INFLUX_USERNAME=<username>
  # - INFLUX_PASSWORD=<password>
  # - INFLUXDB_UDP_ENABLED=false
  # - INFLUXDB_UDP_BIND_ADDRESS=0.0.0.0:8086
  # - INFLUXDB_UDP_DATABASE=udp
    volumes:
    - ./volumes/influxdb/data:/var/lib/influxdb
    - ./backups/influxdb/db:/var/lib/influxdb/backup
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8086"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  mosquitto:
    container_name: mosquitto
    build:
      context: ./.templates/mosquitto/.
      args:
      - MOSQUITTO_BASE=eclipse-mosquitto:latest
    restart: unless-stopped
    environment:
    - TZ=${TZ:-Etc/UTC}
    ports:
    - "1883:1883"
    volumes:
    - ./volumes/mosquitto/config:/mosquitto/config
    - ./volumes/mosquitto/data:/mosquitto/data
    - ./volumes/mosquitto/log:/mosquitto/log
    - ./volumes/mosquitto/pwfile:/mosquitto/pwfile

  nodered:
    container_name: nodered
    build:
      context: ./services/nodered/.
      args:
      - DOCKERHUB_TAG=latest
      - EXTRA_PACKAGES=
    restart: unless-stopped
    user: "0"
    environment:
     - TZ=${TZ:-Etc/UTC}
    ports:
     - "1880:1880"
    volumes:
     - ./volumes/nodered/data:/data
     - ./volumes/nodered/ssh:/root/.ssh
    labels:
      - "traefik.enable=true"                      # Tell traefik to consider this container, see https://doc.traefik.io/traefik/routing/providers/docker/#traefikenable
      # Router configuration, see https://doc.traefik.io/traefik/routing/providers/docker/#routers
      - "traefik.http.routers.nodered.rule=Host(`nodered.<your-domain>`)"  # Check if the request domain (host header value) targets 'nodered.queple.duckdns.org', see https://doc.traefik.io/traefik/routing/routers/#rule
      - "traefik.http.routers.nodered.entrypoints=websecure"                      # Limit the router to entryPoint 'websecure' (HTTPS)
      - "traefik.http.routers.nodered.tls.certresolver=le"                        # Let the certificate resolver 'le' generated (or renew) certificates based on the router's Host-rule(s), see https://doc.traefik.io/traefik/routing/routers/#certresolver
      - "traefik.http.routers.nodered.middlewares=traefik-auth"    
      - "traefik.http.middlewares.traefik-auth.basicauth.users=<user:password>" # Use basic authentication, see https://doc.traefik.io/traefik/middlewares/http/basicauth/

  portainer-ce:
    container_name: portainer-ce
    image: portainer/portainer-ce
    restart: unless-stopped
    ports:
     - "8000:8000"
     - "9000:9000"
     # HTTPS
     - "9443:9443"
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
     - ./volumes/portainer-ce/data:/data
    labels:
      - "traefik.enable=true"                      # Tell traefik to consider this container, see https://doc.traefik.io/traefik/routing/providers/docker/#traefikenable
      # Router configuration, see https://doc.traefik.io/traefik/routing/providers/docker/#routers
      - "traefik.http.routers.portainer.rule=Host(`portainer.<your-domain>`)"  # Check if the request domain (host header value) targets 'portainer.queple.duckdns.org', see https://doc.traefik.io/traefik/routing/routers/#rule
      - "traefik.http.routers.portainer.entrypoints=websecure"                      # Limit the router to entryPoint 'websecure' (HTTPS)
      - "traefik.http.routers.portainer.tls.certresolver=le"                        # Let the certificate resolver 'le' generated (or renew) certificates based on the router's Host-rule(s), see https://doc.traefik.io/traefik/routing/routers/#certresolver
      #- "traefik.http.routers.portainer.middlewares=traefik-auth"    
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      #- "traefik.http.middlewares.traefik-auth.basicauth.users=<user:password>" # Use basic authentication, see https://doc.traefik.io/traefik/middlewares/http/basicauth/

#  portainer_agent:
#    image: portainer/agent
#    container_name: portainer-agent
#    ports:
#    - "9001:9001"
#    volumes:
#    - /var/run/docker.sock:/var/run/docker.sock
#    - /var/lib/docker/volumes:/var/lib/docker/volumes
#    restart: unless-stopped

